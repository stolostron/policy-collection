apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  repo:
    env:
    - name: KUSTOMIZE_PLUGIN_HOME
      value: /etc/kustomize/plugin
    - name: POLICY_GEN_ENABLE_HELM
      value: "true"
    initContainers:
    - args:
      - -c
      - cp /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator/PolicyGenerator
        /policy-generator/PolicyGenerator
      command:
      - /bin/bash
      image: 'registry.redhat.io/rhacm2/multicluster-operators-subscription-rhel8:v{{ (lookup "operator.open-cluster-management.io/v1" "MultiClusterHub" "open-cluster-management" "multiclusterhub").status.currentVersion }}'
      name: policy-generator-install
      volumeMounts:
      - mountPath: /policy-generator
        name: policy-generator
    volumeMounts:
    - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
      name: policy-generator
    volumes:
    - emptyDir: {}
      name: policy-generator
  kustomizeBuildOptions: --enable-alpha-plugins
  resourceHealthChecks:
  - check: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.compliant ~= nil then
          if obj.status.compliant == "Compliant" then
            hs.status = "Healthy"
            hs.message = "Policy is Compliant"
            return hs
          end
          if obj.status.compliant == "Pending" then
            hs.status = "Progressing"
            hs.message = "Policy is waiting for a dependency"
            return hs
          end
          if obj.status.compliant == "NonCompliant" then
            hs.status = "Degraded"
            hs.message = "Policy is NonCompliant"
            return hs
          end
        end
      end
      hs.status = "Healthy"
      hs.message = "Policy has not completed placement"
      return hs
    group: policy.open-cluster-management.io
    kind: Policy
  - check: |
      hs = {}
      hs.status = "Healthy"
      hs.message = "PolicySet has not completed placement"
      if obj.status ~= nil and obj.status.compliant ~= nil then
        if obj.status.compliant == "Compliant" then
          hs.status = "Healthy"
        end
        if obj.status.compliant == "Pending" then
          hs.status = "Progressing"
        end
        if obj.status.compliant == "NonCompliant" then
          hs.status = "Degraded"
        end
      end
      if obj.status ~= nil and obj.status.statusMessage ~= nil then
        hs.message = obj.status.statusMessage
      end
      return hs
    group: policy.open-cluster-management.io
    kind: PolicySet
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openshift-gitops-policy-admin
rules:
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
    apiGroups:
      - policy.open-cluster-management.io
    resources:
      - policies
      - policysets
      - placementbindings
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
    apiGroups:
      - apps.open-cluster-management.io
    resources:
      - placementrules
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
    apiGroups:
      - cluster.open-cluster-management.io
    resources:
      - placements
      - placements/status
      - placementdecisions
      - placementdecisions/status
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openshift-gitops-policy-admin
subjects:
  - kind: ServiceAccount
    name: openshift-gitops-argocd-application-controller
    namespace: openshift-gitops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-gitops-policy-admin
